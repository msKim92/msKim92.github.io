<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://mskim92.github.io/</id><title>SoThoughtful;</title><subtitle>백엔드 개발자의 정리글, backend java, spring stuff</subtitle> <updated>2023-01-12T14:53:30+09:00</updated> <author> <name>Minsub Kim</name> <uri>https://mskim92.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://mskim92.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://mskim92.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2023 Minsub Kim </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>행위패턴 - 전략패턴과 상태 패턴</title><link href="https://mskim92.github.io/posts/strategy/" rel="alternate" type="text/html" title="행위패턴 - 전략패턴과 상태 패턴" /><published>2023-01-07T10:11:07+09:00</published> <updated>2023-01-11T23:28:45+09:00</updated> <id>https://mskim92.github.io/posts/strategy/</id> <content src="https://mskim92.github.io/posts/strategy/" /> <author> <name>Minsub Kim</name> </author> <category term="CS" /> <category term="Design Pattern" /> <summary> Strategy Pattern &amp;amp; State Pattern 🧙‍♂️ 디자인 패턴이란? 디자인 패턴이란? 디자인 패턴은 소프트웨어 공학의 소프트웨어 설계에서 공통으로 발생하는 문제를 자주 쓰이는 설계 방법을 정리한 패턴이다. 디자인 패턴을 참고하여 개발하면 효율성과 유지보수성, 운용성이 높아지며, 프로그램 최적화가 된다고 한다. 　 디자인 패턴을 목적과 범위로 나눌수 있다 구분 유형 설명   생성 객체 인스턴스 생성에 관여, 클래... </summary> </entry> <entry><title>생성 패턴 - 추상 팩토리 메서드 패턴</title><link href="https://mskim92.github.io/posts/abstract/" rel="alternate" type="text/html" title="생성 패턴 - 추상 팩토리 메서드 패턴" /><published>2023-01-02T09:10:57+09:00</published> <updated>2023-01-04T13:52:39+09:00</updated> <id>https://mskim92.github.io/posts/abstract/</id> <content src="https://mskim92.github.io/posts/abstract/" /> <author> <name>Minsub Kim</name> </author> <category term="CS" /> <category term="Design Pattern" /> <summary> Abstract Factory Method Pattern 디자인 패턴이란? 디자인 패턴이란? 디자인 패턴은 소프트웨어 공학의 소프트웨어 설계에서 공통으로 발생하는 문제를 자주 쓰이는 설계 방법을 정리한 패턴이다. 디자인 패턴을 참고하여 개발하면 효율성과 유지보수성, 운용성이 높아지며, 프로그램 최적화가 된다고 한다. 　 디자인 패턴을 목적과 범위로 나눌수 있다 구분 유형 설명   생성 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생... </summary> </entry> <entry><title>LAMBDA?</title><link href="https://mskim92.github.io/posts/lambda/" rel="alternate" type="text/html" title="LAMBDA?" /><published>2022-12-28T19:41:57+09:00</published> <updated>2023-01-03T13:23:45+09:00</updated> <id>https://mskim92.github.io/posts/lambda/</id> <content src="https://mskim92.github.io/posts/lambda/" /> <author> <name>Minsub Kim</name> </author> <category term="Java" /> <category term="Syntax" /> <summary> What is Lambda? 람다란? 메서드를 하나의 식으로 표현한 것. 익명함수 (Anonymous functions)와 같다. 사용방법 //평문 int max(int a, int b){ return a&amp;gt;b ? a : b; } //람다 (타입이 추론 가능할때 생략가능) (a,b) -&amp;gt; { return a &amp;gt; b ? a : b;} //리턴일때는 중괄호 생략 불가 그밖에 (int a) -&amp;gt; a*a; = a-&amp;gt; a*a; //매게변수 괄호 생략가능 (String name, int i) -&amp;gt; System.out.println(name+"="+i) //중괄호 생략가능 함수형 인터페이스 (@functional interface)? 함수형 인터페이스는 람다식... </summary> </entry> <entry><title>생성 패턴 - 프로토타입 패턴</title><link href="https://mskim92.github.io/posts/prototype/" rel="alternate" type="text/html" title="생성 패턴 - 프로토타입 패턴" /><published>2022-12-26T15:10:57+09:00</published> <updated>2023-01-04T13:52:39+09:00</updated> <id>https://mskim92.github.io/posts/prototype/</id> <content src="https://mskim92.github.io/posts/prototype/" /> <author> <name>Minsub Kim</name> </author> <category term="CS" /> <category term="Design Pattern" /> <summary> Prototype Method Pattern 🧙‍♂️ 디자인 패턴이란? 디자인 패턴이란? 디자인 패턴은 소프트웨어 공학의 소프트웨어 설계에서 공통으로 발생하는 문제를 자주 쓰이는 설계 방법을 정리한 패턴이다. 디자인 패턴을 참고하여 개발하면 효율성과 유지보수성, 운용성이 높아지며, 프로그램 최적화가 된다고 한다. 　 디자인 패턴을 목적과 범위로 나눌수 있다 구분 유형 설명   생성 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성 ... </summary> </entry> <entry><title>생성 패턴 - 팩토리 메서드 패턴</title><link href="https://mskim92.github.io/posts/factory-method/" rel="alternate" type="text/html" title="생성 패턴 - 팩토리 메서드 패턴" /><published>2022-12-26T15:10:57+09:00</published> <updated>2023-01-04T13:52:39+09:00</updated> <id>https://mskim92.github.io/posts/factory-method/</id> <content src="https://mskim92.github.io/posts/factory-method/" /> <author> <name>Minsub Kim</name> </author> <category term="CS" /> <category term="Design Pattern" /> <summary> Factory Method Pattern 디자인 패턴이란? 디자인 패턴이란? 디자인 패턴은 소프트웨어 공학의 소프트웨어 설계에서 공통으로 발생하는 문제를 자주 쓰이는 설계 방법을 정리한 패턴이다. 디자인 패턴을 참고하여 개발하면 효율성과 유지보수성, 운용성이 높아지며, 프로그램 최적화가 된다고 한다. 　 디자인 패턴을 목적과 범위로 나눌수 있다 구분 유형 설명   생성 객체 인스턴스 생성에 관여, 클래스 정의와 객체 생성 방식을 구조화... </summary> </entry> </feed>
